import groovy.json.JsonOutput

// This script does the following: for all the projects in the build file,
// generate a merged configuration of all the available configurations,
// and then list the dependencies as a tree.

// It's the responsibility of the caller to pick the project(s) they are
// interested in from the results.

// CLI usages:
// gradle -q -I init.gradle snykResolvedDepsJson
// gradle -q -I init.gradle snykResolvedDepsJson -Pconfiguration=specificConf -PonlySubProject=sub-project

// (-q to have clean output, -P supplies args as per https://stackoverflow.com/a/48370451)

// Output format:
//
// Since Gradle is chatty and often prints a "Welcome" banner even with -q option,
// the only output lines that matter are:
// - prefixed "SNYKECHO ": should be immediately printed as debug information by the caller
// - prefixed "JSONDEPS ": JSON representation of the dependencies trees for all projects in the following format

// interface JsonDepsScriptResult {
//   defaultProject: string;
//   projects: ProjectsDict;
//   allSubProjectNames: string[];
// }
// interface ProjectsDict {
//   [project: string]: GradleProjectInfo;
// }

// interface GradleProjectInfo {
//   depDict: DepDict;
//   targetFile: string;
// }
// export interface DepDict {
//   [name: string]: DepTree;
// }
// interface DepTree {
//   name: string;
//   version: string;
//   dependencies?: DepDict;
// }

// We are attaching this task to every project, as this is the only reliable way to run it
// when we start with a subproject build.gradle. As a consequence, we need to make sure we
// only ever run it once, for the "starting" project.
def snykMergedDepsConfExecuted = false
allprojects { everyProj ->
    task snykResolvedDepsJson {
        def onlyProj = project.hasProperty('onlySubProject') ? onlySubProject : null
        def onlyConf = project.hasProperty('configuration') ? configuration : null

        // currentChain is a protection against dependency cycles, which are perfectly normal in Java/Gradle world
        // This function converts a Gradle dependency tree into DepTree structure used by Snyk CLI
        def depsToDict
        depsToDict = { Iterable deps, Set currentChain ->
            def res = [:]
            deps.each { d ->
                def depName = "$d.moduleGroup:$d.moduleName"
                if (!currentChain.contains(depName)) {
                    def row = ['name': depName, 'version': d.moduleVersion]
                    currentChain.add(depName)
                    def subDeps = depsToDict(d.children, currentChain)
                    currentChain.remove(depName)
                    if (subDeps.size() > 0) {
                        row['dependencies'] = subDeps
                    }
                    res[row['name']] = row
                }
            }
            return res
        }

        doLast { task ->
            if (!snykMergedDepsConfExecuted) {
                println('SNYKECHO snykResolvedDepsJson task is executing via doLast')
                def projectsDict = [:]
                def defaultProjectName = task.project.name
                def result = [
                    'defaultProject': defaultProjectName,
                    'projects': projectsDict,
                    'allSubProjectNames': allprojects.collect { it.name }
                ]

                def shouldScanProject = {
                    onlyProj == null ||
                    (onlyProj == '.' && it.name == defaultProjectName) ||
                    it.name == onlyProj
                }

                allprojects.findAll(shouldScanProject).each { proj ->
                    println('SNYKECHO processing project: ' + proj.name)
                    def snykConf = null
                    if (proj.configurations.size() > 0) {
                        if (onlyConf != null) {
                            // We select one existing configuration, with its attributes.
                            try {
                                snykConf = proj.configurations.getByName(onlyConf)
                            } catch (e) {
                                throw new RuntimeException('Configuration not found: ' + onlyConf +
                                    ', available configurations for project ' + proj + ': '
                                     + proj.configurations.collect { it.name })
                            }
                        } else if (proj.configurations.findAll({ it.name == 'snykMergedDepsConf'}).size() == 0) {
                            // We create a new, "merged" configuration here. It has no attributes, which might be
                            // a problem for Android builds, where a resolution of a dependency "variant"
                            // is often dependent on configuration attributes (such as BuildType or Usage).
                            println('SNYKECHO constructing merged configuration')
                            snykConf = proj.configurations.create('snykMergedDepsConf')
                            proj.configurations
                                .findAll({ it.name != 'snykMergedDepsConf' && (onlyConf == null || it.name == onlyConf) })
                                .each { snykConf.extendsFrom(it) }
                        }
                    }
                    if (snykConf != null) {
                        println('SNYKECHO resolving configuration ' + snykConf.name)
                        def gradleDeps = snykConf.resolvedConfiguration.firstLevelModuleDependencies
                        println('SNYKECHO converting the dependency graph to the DepTree format')
                        projectsDict[proj.name] = [
                            'targetFile': findProject(proj.path).buildFile.toString(),
                            'depDict': depsToDict(gradleDeps, new HashSet())
                        ]
                    } else {
                        projectsDict[proj.name] = [
                            'targetFile': findProject(proj.path).buildFile.toString()
                        ]
                    }
                }
                println("JSONDEPS " + JsonOutput.toJson(result))
                snykMergedDepsConfExecuted = true
            }
        }
    }
}
