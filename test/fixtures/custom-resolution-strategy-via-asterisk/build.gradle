apply plugin: 'java'
apply plugin: 'maven'

group = 'com.github.jitpack'

sourceCompatibility = 1.8 // java 8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.google.guava:guava:18.0'
  compile 'batik:batik-dom:1.6'
  compile 'commons-discovery:commons-discovery:0.2'
  compile 'axis:axis:1.3'
  compile 'com.android.tools.build:builder:2.3.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// To specify a license in the pom:
install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }
}

Closure versionStrategy = {
  eachDependency { details ->
    if (details.requested.group == 'com.android.tools' && details.requested.name == 'annotations') {
      details.useVersion '25.2.0'
    }
  }
}

// See https://github.com/snyk/snyk/issues/729
// We currently do NOT support this. Securely transplanting resolution strategy from constituent
// configurations using Gradle APIs is pretty hard.
// Known workarounds:
// - use `configurations.all` syntax, as recommended by Gradle documentation
// - scan a particular configuration using, e.g. `snyk test --configuration-matching=^compile$`
configurations*.resolutionStrategy versionStrategy
